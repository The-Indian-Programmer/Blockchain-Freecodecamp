{
  "address": "0x6BBCee3a047D020EBe4fCE71ad5DA03220C082F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_enteranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ganLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_AmountSendFailedToRecentWinner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "Raffle_NotUpKeepNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Raffle_Entered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Raffle_PickedRandomWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Raffle_RequestedRandomWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnteranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getParticipant",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x234b67d71ea8a9ca908f64399ced1d5e49c462b95d6be451b4d30a40c0b189b0",
  "receipt": {
    "to": null,
    "from": "0x2C673Ef0E3a535714d322504349c69BEFdB08F53",
    "contractAddress": "0x6BBCee3a047D020EBe4fCE71ad5DA03220C082F4",
    "transactionIndex": 29,
    "gasUsed": "1355038",
    "logsBloom": "0x
    "blockHash": "0x72bcc4c35e362d44465911c2afcd47c332430721fd660b076fe9fcf6b05057d9",
    "transactionHash": "0x234b67d71ea8a9ca908f64399ced1d5e49c462b95d6be451b4d30a40c0b189b0",
    "logs": [],
    "blockNumber": 4102610,
    "cumulativeGasUsed": "28586112",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "4570",
    "500000",
    60
  ],
  "numDeployments": 2,
  "solcInputHash": "342d7fa131937e2032fbc8271aaab7d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_enteranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ganLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_AmountSendFailedToRecentWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeStamp\",\"type\":\"uint256\"}],\"name\":\"Raffle_NotUpKeepNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Raffle_Entered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Raffle_PickedRandomWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Raffle_RequestedRandomWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnteranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle_NotEnoughFee();\\nerror Raffle_AmountSendFailedToRecentWinner();\\nerror Raffle_NotOpen();\\nerror Raffle_NotUpKeepNeeded(uint256 balance, uint256 participants, bool isOpen, uint256 lastTimeStamp);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type Declaration */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n/* \\n1. Entre the raffle by paying some amount \\n    a. 1 ticket = 0.01 ETH\\n    b. 1 person can buy 1 ticket \\n    \\n\\n2. Pick a winner\\n3. Winner to be selected every minutes (Automatically by chainlink) \\n*/\\n    /* State Variables */\\n    uint256 private immutable i_enteraneFee;\\n    address payable[] private i_participants;\\n    VRFCoordinatorV2Interface private i_vrfCoordinatorV2;\\n    bytes32 private immutable i_ganLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n    RaffleState private s_raffleState;\\n\\n    /* Lottery Winners */\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_timeInterval;\\n\\n    /* Events */\\n    event Raffle_Entered(address indexed _from, uint256 _amount);\\n    event Raffle_RequestedRandomWinner(uint256 indexed requestId);\\n    event Raffle_PickedRandomWinner(address indexed _winner, uint256 _amount);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 _enteranceFee,\\n        bytes32 ganLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_enteraneFee = _enteranceFee;\\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_ganLane = ganLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_timeInterval = interval;\\n    }\\n\\n    // function to enter the raffle\\n    function enterRaffle() external payable returns (bool) {\\n        if (msg.value < i_enteraneFee) revert Raffle_NotEnoughFee();\\n        if (s_raffleState != RaffleState.OPEN) revert Raffle_NotOpen();\\n\\n        i_participants.push(payable(msg.sender));\\n        // Emit an event whenever we update the state varibles or mapping\\n        emit Raffle_Entered(msg.sender, msg.value);\\n\\n        return true;\\n    }\\n\\n    // function to pick random winner\\n    \\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override view returns  (bool upkeepNeeded, bytes memory /* performData */) {\\n        // upkeepNeeded = true;\\n        // performData = checkData;\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_timeInterval);\\n        bool enoughParticipants = (i_participants.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n\\n        upkeepNeeded = (isOpen && timePassed && enoughParticipants && hasBalance);\\n        return (upkeepNeeded, bytes(\\\"\\\"));\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData */) external override {\\n        \\n        // // check if the checkUpkeep function returns true\\n        // if (checkUpkeep(bytes(\\\"\\\")) == false) return;\\n\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upKeepNeeded) revert Raffle_NotUpKeepNeeded(address(this).balance, i_participants.length , s_raffleState == RaffleState.OPEN , s_lastTimeStamp);\\n        \\n        \\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinatorV2.requestRandomWords(\\n            i_ganLane, //\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS //\\n        );\\n        s_raffleState = RaffleState.OPEN;\\n        i_participants = new address payable[](0);\\n        emit Raffle_RequestedRandomWinner(requestId);\\n    }\\n\\n    // fulfillRandomness function\\n    function fulfillRandomWords(uint256 /* requestID */, uint256[] memory randomWords) internal override {\\n        uint256 randomNum = randomWords[0];\\n        uint256 winnerIndex = randomNum % i_participants.length;\\n        address payable recentWinner = i_participants[winnerIndex];\\n        s_recentWinner = recentWinner;\\n        s_lastTimeStamp = block.timestamp;\\n\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert Raffle_AmountSendFailedToRecentWinner();\\n\\n        emit Raffle_PickedRandomWinner(recentWinner, address(this).balance);\\n    }\\n\\n    // ***************************************** view and pure functions *********************************************************\\n\\n    // function to get the enterance fee\\n    function getEnteranceFee() external view returns (uint256) {\\n        return i_enteraneFee;\\n    }\\n\\n    // function to get the participants by index\\n    function getParticipant(\\n        uint256 _index\\n    ) external view returns (address payable) {\\n        return i_participants[_index];\\n    }\\n\\n    // function to get the participants\\n    function getParticipants()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return i_participants;\\n    }\\n\\n    // function to get the recent winner\\n    function getRecentWinner() external view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    // function to get raffle state\\n    function getRaffleState() external view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    // function to get the last time stamp\\n    function getLastTimeStamp() external view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n\\n    // function to get the time interval\\n    function getTimeInterval() external view returns (uint256) {\\n        return i_timeInterval;\\n    }\\n\\n    // function to get the balance\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n\\n    // funciton to get the num  words\\n    function getNumWords() external pure returns (uint32) {\\n        return NUM_WORDS;\\n    } \\n}\\n\",\"keccak256\":\"0x14a9ab284e20a0ace56566572f1c5a4c8962dd278d1a70362860e5b68fedfe7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001a7138038062001a718339818101604052810190620000389190620001b6565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a0818152505085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001225762000121620002be565b5b02179055504260038190555080610120818152505050505050505062000374565b6000815190506200015481620002f2565b92915050565b6000815190506200016b816200030c565b92915050565b600081519050620001828162000326565b92915050565b600081519050620001998162000340565b92915050565b600081519050620001b0816200035a565b92915050565b60008060008060008060c08789031215620001d657620001d5620002ed565b5b6000620001e689828a0162000143565b9650506020620001f989828a0162000171565b95505060406200020c89828a016200015a565b94505060606200021f89828a016200019f565b93505060806200023289828a0162000188565b92505060a06200024589828a0162000171565b9150509295509295509295565b60006200025f8262000270565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002fd8162000252565b81146200030957600080fd5b50565b620003178162000266565b81146200032357600080fd5b50565b620003318162000290565b81146200033d57600080fd5b50565b6200034b816200029a565b81146200035757600080fd5b50565b6200036581620002aa565b81146200037157600080fd5b50565b60805160601c60a05160c05160e05160c01c6101005160e01c6101205161168f620003e26000396000818161030e01526109a90152600061072b01526000610708015260006106e701526000818161045c01526108ac01526000818161039a01526103ee015261168f6000f3fe6080604052600436106100c25760003560e01c80634585e33b1161007f57806353a2c19a1161005957806353a2c19a1461024b5780635aa68ac0146102765780636e04ff0d146102a1578063c1c244e8146102df576100c2565b80634585e33b146101cc578063473f1ddc146101f5578063535bf50f14610220576100c2565b806303a82712146100c7578063115cbaf5146100f257806312065fe01461011d5780631b9db2ef146101485780631fe543e3146101855780632cfcc539146101ae575b600080fd5b3480156100d357600080fd5b506100dc61030a565b6040516100e99190611221565b60405180910390f35b3480156100fe57600080fd5b50610107610332565b6040516101149190611206565b60405180910390f35b34801561012957600080fd5b50610132610349565b60405161013f9190611221565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610eb4565b610351565b60405161017c9190611102565b60405180910390f35b34801561019157600080fd5b506101ac60048036038101906101a79190610f0e565b610398565b005b6101b6610458565b6040516101c39190611168565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190610e1e565b6105d9565b005b34801561020157600080fd5b5061020a61087e565b60405161021791906110e7565b60405180910390f35b34801561022c57600080fd5b506102356108a8565b6040516102429190611221565b60405180910390f35b34801561025757600080fd5b506102606108d0565b60405161026d9190611281565b60405180910390f35b34801561028257600080fd5b5061028b6108d9565b6040516102989190611146565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610e6b565b610967565b6040516102d6929190611183565b60405180910390f35b3480156102eb57600080fd5b506102f4610a28565b6040516103019190611221565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b600047905090565b60008082815481106103665761036561159e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161044192919061111d565b60405180910390fd5b6104548282610a32565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000003410156104b4576040517fc81d8b3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104c8576104c761156f565b5b600160149054906101000a900460ff1660018111156104ea576104e961156f565b5b14610521576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f3f6ba5e524b35dc46d32f65ba41d100a8a361bba76e95a57a2b5acc64433e932346040516105ca9190611221565b60405180910390a26001905090565b60006105f360405180602001604052806000815250610967565b5090508061067b5747600080549050600060018111156106165761061561156f565b5b600160149054906101000a900460ff1660018111156106385761063761156f565b5b146003546040517feb1e82cd000000000000000000000000000000000000000000000000000000008152600401610672949392919061123c565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106a05761069f61156f565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b815260040161076c9594939291906111b3565b602060405180830381600087803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190610ee1565b90506000600160146101000a81548160ff021916908360018111156107e6576107e561156f565b5b0217905550600067ffffffffffffffff811115610806576108056115cd565b5b6040519080825280602002602001820160405280156108345781602001602082028036833780820191505090505b506000908051906020019061084a929190610be9565b50807fd2848d183aa47dc898c1cb0dc1a3b95ba22f0adc4a14a0f3ad37c45f60d0993360405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b6060600080548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610913575b5050505050905090565b6000606060008060018111156109805761097f61156f565b5b600160149054906101000a900460ff1660018111156109a2576109a161156f565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426109d6919061137e565b119050600080600080549050119050600080471190508380156109f65750825b80156109ff5750815b8015610a085750805b955085604051806020016040528060008152509550955050505050915091565b6000600354905090565b600081600081518110610a4857610a4761159e565b5b602002602001015190506000808054905082610a6491906114e0565b90506000808281548110610a7b57610a7a61159e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b16906110d2565b60006040518083038185875af1925050503d8060008114610b53576040519150601f19603f3d011682016040523d82523d6000602084013e610b58565b606091505b5050905080610b93576040517fdf8099d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fe6b797a77fcd41bd60a506e0dfe9a5e720626377cf98caff341564bb80006dc847604051610bd99190611221565b60405180910390a2505050505050565b828054828255906000526020600020908101928215610c62579160200282015b82811115610c615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c09565b5b509050610c6f9190610c73565b5090565b5b80821115610c8c576000816000905550600101610c74565b5090565b6000610ca3610c9e846112c1565b61129c565b90508083825260208201905082856020860282011115610cc657610cc5611606565b5b60005b85811015610cf65781610cdc8882610df4565b845260208401935060208301925050600181019050610cc9565b5050509392505050565b6000610d13610d0e846112ed565b61129c565b905082815260208101848484011115610d2f57610d2e61160b565b5b610d3a84828561146d565b509392505050565b600082601f830112610d5757610d56611601565b5b8135610d67848260208601610c90565b91505092915050565b60008083601f840112610d8657610d85611601565b5b8235905067ffffffffffffffff811115610da357610da26115fc565b5b602083019150836001820283011115610dbf57610dbe611606565b5b9250929050565b600082601f830112610ddb57610dda611601565b5b8135610deb848260208601610d00565b91505092915050565b600081359050610e0381611642565b92915050565b600081519050610e1881611642565b92915050565b60008060208385031215610e3557610e34611615565b5b600083013567ffffffffffffffff811115610e5357610e52611610565b5b610e5f85828601610d70565b92509250509250929050565b600060208284031215610e8157610e80611615565b5b600082013567ffffffffffffffff811115610e9f57610e9e611610565b5b610eab84828501610dc6565b91505092915050565b600060208284031215610eca57610ec9611615565b5b6000610ed884828501610df4565b91505092915050565b600060208284031215610ef757610ef6611615565b5b6000610f0584828501610e09565b91505092915050565b60008060408385031215610f2557610f24611615565b5b6000610f3385828601610df4565b925050602083013567ffffffffffffffff811115610f5457610f53611610565b5b610f6085828601610d42565b9150509250929050565b6000610f768383610f82565b60208301905092915050565b610f8b816113c4565b82525050565b610f9a816113c4565b82525050565b610fa9816113b2565b82525050565b6000610fba8261132e565b610fc48185611351565b9350610fcf8361131e565b8060005b83811015611000578151610fe78882610f6a565b9750610ff283611344565b925050600181019050610fd3565b5085935050505092915050565b611016816113d6565b82525050565b611025816113e2565b82525050565b600061103682611339565b6110408185611362565b935061105081856020860161147c565b6110598161161a565b840191505092915050565b61106d8161145b565b82525050565b6000611080600083611373565b915061108b8261162b565b600082019050919050565b61109f816113ff565b82525050565b6110ae8161142d565b82525050565b6110bd81611437565b82525050565b6110cc81611447565b82525050565b60006110dd82611073565b9150819050919050565b60006020820190506110fc6000830184610fa0565b92915050565b60006020820190506111176000830184610f91565b92915050565b60006040820190506111326000830185610fa0565b61113f6020830184610fa0565b9392505050565b600060208201905081810360008301526111608184610faf565b905092915050565b600060208201905061117d600083018461100d565b92915050565b6000604082019050611198600083018561100d565b81810360208301526111aa818461102b565b90509392505050565b600060a0820190506111c8600083018861101c565b6111d560208301876110c3565b6111e26040830186611096565b6111ef60608301856110b4565b6111fc60808301846110b4565b9695505050505050565b600060208201905061121b6000830184611064565b92915050565b600060208201905061123660008301846110a5565b92915050565b600060808201905061125160008301876110a5565b61125e60208301866110a5565b61126b604083018561100d565b61127860608301846110a5565b95945050505050565b600060208201905061129660008301846110b4565b92915050565b60006112a66112b7565b90506112b282826114af565b919050565b6000604051905090565b600067ffffffffffffffff8211156112dc576112db6115cd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611308576113076115cd565b5b6113118261161a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006113898261142d565b91506113948361142d565b9250828210156113a7576113a6611511565b5b828203905092915050565b60006113bd8261140d565b9050919050565b60006113cf8261140d565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113fa8261162e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611466826113ec565b9050919050565b82818337600083830152505050565b60005b8381101561149a57808201518184015260208101905061147f565b838111156114a9576000848401525b50505050565b6114b88261161a565b810181811067ffffffffffffffff821117156114d7576114d66115cd565b5b80604052505050565b60006114eb8261142d565b91506114f68361142d565b92508261150657611505611540565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061163f5761163e61156f565b5b50565b61164b8161142d565b811461165657600080fd5b5056fea26469706673582212205a6ad8fd35bc493704e38d18f238d3c4970f354ee145c67dd214d73ff29b3e7364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80634585e33b1161007f57806353a2c19a1161005957806353a2c19a1461024b5780635aa68ac0146102765780636e04ff0d146102a1578063c1c244e8146102df576100c2565b80634585e33b146101cc578063473f1ddc146101f5578063535bf50f14610220576100c2565b806303a82712146100c7578063115cbaf5146100f257806312065fe01461011d5780631b9db2ef146101485780631fe543e3146101855780632cfcc539146101ae575b600080fd5b3480156100d357600080fd5b506100dc61030a565b6040516100e99190611221565b60405180910390f35b3480156100fe57600080fd5b50610107610332565b6040516101149190611206565b60405180910390f35b34801561012957600080fd5b50610132610349565b60405161013f9190611221565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610eb4565b610351565b60405161017c9190611102565b60405180910390f35b34801561019157600080fd5b506101ac60048036038101906101a79190610f0e565b610398565b005b6101b6610458565b6040516101c39190611168565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190610e1e565b6105d9565b005b34801561020157600080fd5b5061020a61087e565b60405161021791906110e7565b60405180910390f35b34801561022c57600080fd5b506102356108a8565b6040516102429190611221565b60405180910390f35b34801561025757600080fd5b506102606108d0565b60405161026d9190611281565b60405180910390f35b34801561028257600080fd5b5061028b6108d9565b6040516102989190611146565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610e6b565b610967565b6040516102d6929190611183565b60405180910390f35b3480156102eb57600080fd5b506102f4610a28565b6040516103019190611221565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b600047905090565b60008082815481106103665761036561159e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161044192919061111d565b60405180910390fd5b6104548282610a32565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000003410156104b4576040517fc81d8b3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104c8576104c761156f565b5b600160149054906101000a900460ff1660018111156104ea576104e961156f565b5b14610521576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f3f6ba5e524b35dc46d32f65ba41d100a8a361bba76e95a57a2b5acc64433e932346040516105ca9190611221565b60405180910390a26001905090565b60006105f360405180602001604052806000815250610967565b5090508061067b5747600080549050600060018111156106165761061561156f565b5b600160149054906101000a900460ff1660018111156106385761063761156f565b5b146003546040517feb1e82cd000000000000000000000000000000000000000000000000000000008152600401610672949392919061123c565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106a05761069f61156f565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b815260040161076c9594939291906111b3565b602060405180830381600087803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190610ee1565b90506000600160146101000a81548160ff021916908360018111156107e6576107e561156f565b5b0217905550600067ffffffffffffffff811115610806576108056115cd565b5b6040519080825280602002602001820160405280156108345781602001602082028036833780820191505090505b506000908051906020019061084a929190610be9565b50807fd2848d183aa47dc898c1cb0dc1a3b95ba22f0adc4a14a0f3ad37c45f60d0993360405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b6060600080548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610913575b5050505050905090565b6000606060008060018111156109805761097f61156f565b5b600160149054906101000a900460ff1660018111156109a2576109a161156f565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426109d6919061137e565b119050600080600080549050119050600080471190508380156109f65750825b80156109ff5750815b8015610a085750805b955085604051806020016040528060008152509550955050505050915091565b6000600354905090565b600081600081518110610a4857610a4761159e565b5b602002602001015190506000808054905082610a6491906114e0565b90506000808281548110610a7b57610a7a61159e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b16906110d2565b60006040518083038185875af1925050503d8060008114610b53576040519150601f19603f3d011682016040523d82523d6000602084013e610b58565b606091505b5050905080610b93576040517fdf8099d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fe6b797a77fcd41bd60a506e0dfe9a5e720626377cf98caff341564bb80006dc847604051610bd99190611221565b60405180910390a2505050505050565b828054828255906000526020600020908101928215610c62579160200282015b82811115610c615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c09565b5b509050610c6f9190610c73565b5090565b5b80821115610c8c576000816000905550600101610c74565b5090565b6000610ca3610c9e846112c1565b61129c565b90508083825260208201905082856020860282011115610cc657610cc5611606565b5b60005b85811015610cf65781610cdc8882610df4565b845260208401935060208301925050600181019050610cc9565b5050509392505050565b6000610d13610d0e846112ed565b61129c565b905082815260208101848484011115610d2f57610d2e61160b565b5b610d3a84828561146d565b509392505050565b600082601f830112610d5757610d56611601565b5b8135610d67848260208601610c90565b91505092915050565b60008083601f840112610d8657610d85611601565b5b8235905067ffffffffffffffff811115610da357610da26115fc565b5b602083019150836001820283011115610dbf57610dbe611606565b5b9250929050565b600082601f830112610ddb57610dda611601565b5b8135610deb848260208601610d00565b91505092915050565b600081359050610e0381611642565b92915050565b600081519050610e1881611642565b92915050565b60008060208385031215610e3557610e34611615565b5b600083013567ffffffffffffffff811115610e5357610e52611610565b5b610e5f85828601610d70565b92509250509250929050565b600060208284031215610e8157610e80611615565b5b600082013567ffffffffffffffff811115610e9f57610e9e611610565b5b610eab84828501610dc6565b91505092915050565b600060208284031215610eca57610ec9611615565b5b6000610ed884828501610df4565b91505092915050565b600060208284031215610ef757610ef6611615565b5b6000610f0584828501610e09565b91505092915050565b60008060408385031215610f2557610f24611615565b5b6000610f3385828601610df4565b925050602083013567ffffffffffffffff811115610f5457610f53611610565b5b610f6085828601610d42565b9150509250929050565b6000610f768383610f82565b60208301905092915050565b610f8b816113c4565b82525050565b610f9a816113c4565b82525050565b610fa9816113b2565b82525050565b6000610fba8261132e565b610fc48185611351565b9350610fcf8361131e565b8060005b83811015611000578151610fe78882610f6a565b9750610ff283611344565b925050600181019050610fd3565b5085935050505092915050565b611016816113d6565b82525050565b611025816113e2565b82525050565b600061103682611339565b6110408185611362565b935061105081856020860161147c565b6110598161161a565b840191505092915050565b61106d8161145b565b82525050565b6000611080600083611373565b915061108b8261162b565b600082019050919050565b61109f816113ff565b82525050565b6110ae8161142d565b82525050565b6110bd81611437565b82525050565b6110cc81611447565b82525050565b60006110dd82611073565b9150819050919050565b60006020820190506110fc6000830184610fa0565b92915050565b60006020820190506111176000830184610f91565b92915050565b60006040820190506111326000830185610fa0565b61113f6020830184610fa0565b9392505050565b600060208201905081810360008301526111608184610faf565b905092915050565b600060208201905061117d600083018461100d565b92915050565b6000604082019050611198600083018561100d565b81810360208301526111aa818461102b565b90509392505050565b600060a0820190506111c8600083018861101c565b6111d560208301876110c3565b6111e26040830186611096565b6111ef60608301856110b4565b6111fc60808301846110b4565b9695505050505050565b600060208201905061121b6000830184611064565b92915050565b600060208201905061123660008301846110a5565b92915050565b600060808201905061125160008301876110a5565b61125e60208301866110a5565b61126b604083018561100d565b61127860608301846110a5565b95945050505050565b600060208201905061129660008301846110b4565b92915050565b60006112a66112b7565b90506112b282826114af565b919050565b6000604051905090565b600067ffffffffffffffff8211156112dc576112db6115cd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611308576113076115cd565b5b6113118261161a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006113898261142d565b91506113948361142d565b9250828210156113a7576113a6611511565b5b828203905092915050565b60006113bd8261140d565b9050919050565b60006113cf8261140d565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113fa8261162e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611466826113ec565b9050919050565b82818337600083830152505050565b60005b8381101561149a57808201518184015260208101905061147f565b838111156114a9576000848401525b50505050565b6114b88261161a565b810181811067ffffffffffffffff821117156114d7576114d66115cd565b5b80604052505050565b60006114eb8261142d565b91506114f68361142d565b92508261150657611505611540565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061163f5761163e61156f565b5b50565b61164b8161142d565b811461165657600080fd5b5056fea26469706673582212205a6ad8fd35bc493704e38d18f238d3c4970f354ee145c67dd214d73ff29b3e7364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1167,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_vrfCoordinatorV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)271"
      },
      {
        "astId": 1185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1162"
      },
      {
        "astId": 1187,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1189,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)271": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)1162": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}